package com.whiteboard;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class SolveMazeTest {
    @Test
    public void solveMazeTest() {
        System.out.println();
        System.out.println("Test SolveMaze:");
        System.out.println("===============");

        char[][] maze1 = {
                {'@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@',},
                {'@',' ',' ',' ','@',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',},
                {'@',' ','@',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ',' ',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@','@','@','@','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@','@','@','@','@','@','@','@','@',' ','@',' ','@',' ','@','@','@',' ','@','@','@',},
                {'@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@','@','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@','@','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@','@','@',' ','@',' ','@',' ','@',' ',' ',' ','@',},
                {'@',' ','@',' ',' ',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ','@',},
                {'@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@',' ','@',},
        };

        int[][] expected1Array = {
                {0, 1},
                {1, 1},
                {1, 2},
                {1, 3},
                {2, 3},
                {3, 3},
                {4, 3},
                {5, 3},
                {6, 3},
                {7, 3},
                {8, 3},
                {9, 3},
                {9, 4},
                {9, 5},
                {8, 5},
                {7, 5},
                {6, 5},
                {5, 5},
                {4, 5},
                {3, 5},
                {2, 5},
                {1, 5},
                {1, 6},
                {1, 7},
                {1, 8},
                {1, 9},
                {1, 10},
                {1, 11},
                {2, 11},
                {3, 11},
                {3, 10},
                {3, 9},
                {3, 8},
                {3, 7},
                {4, 7},
                {5, 7},
                {6, 7},
                {7, 7},
                {8, 7},
                {9, 7},
                {9, 8},
                {9, 9},
                {8, 9},
                {7, 9},
                {6, 9},
                {5, 9},
                {5, 10},
                {5, 11},
                {6, 11},
                {7, 11},
                {8, 11},
                {9, 11},
                {10, 11},
                {11, 11},
                {11, 10},
                {11, 9},
                {11, 8},
                {11, 7},
                {11, 6},
                {11, 5},
                {11, 4},
                {11, 3},
                {12, 3},
                {13, 3},
                {14, 3},
                {15, 3},
                {16, 3},
                {17, 3},
                {18, 3},
                {19, 3},
                {19, 4},
                {19, 5},
                {18, 5},
                {17, 5},
                {16, 5},
                {15, 5},
                {14, 5},
                {13, 5},
                {13, 6},
                {13, 7},
                {13, 8},
                {13, 9},
                {13, 10},
                {13, 11},
                {14, 11},
                {15, 11},
                {15, 10},
                {15, 9},
                {15, 8},
                {15, 7},
                {16, 7},
                {17, 7},
                {17, 8},
                {17, 9},
                {17, 10},
                {17, 11},
                {18, 11},
                {19, 11},
                {19, 10},
                {19, 9},
                {19, 8},
                {19, 7},
                {20, 7},
                {21, 7},
                {21, 8},
                {21, 9},
                {21, 10},
                {21, 11},
                {22, 11},
                {23, 11},
                {23, 12},
                {23, 13},
                {23, 14},
                {23, 15},
                {22, 15},
                {21, 15},
                {20, 15},
                {19, 15},
                {18, 15},
                {17, 15},
                {17, 14},
                {17, 13},
                {16, 13},
                {15, 13},
                {14, 13},
                {13, 13},
                {12, 13},
                {11, 13},
                {10, 13},
                {9, 13},
                {9, 14},
                {9, 15},
                {10, 15},
                {11, 15},
                {12, 15},
                {13, 15},
                {14, 15},
                {15, 15},
                {15, 16},
                {15, 17},
                {16, 17},
                {17, 17},
                {18, 17},
                {19, 17},
                {20, 17},
                {21, 17},
                {22, 17},
                {23, 17},
                {23, 18},
                {23, 19},
                {22, 19},
                {21, 19},
                {20, 19},
                {19, 19},
                {18, 19},
                {17, 19},
                {16, 19},
                {15, 19},
                {14, 19},
                {13, 19},
                {13, 18},
                {13, 17},
                {12, 17},
                {11, 17},
                {10, 17},
                {9, 17},
                {8, 17},
                {7, 17},
                {6, 17},
                {5, 17},
                {4, 17},
                {3, 17},
                {2, 17},
                {1, 17},
                {1, 18},
                {1, 19},
                {1, 20},
                {1, 21},
                {1, 22},
                {1, 23},
                {2, 23},
                {3, 23},
                {3, 22},
                {3, 21},
                {3, 20},
                {3, 19},
                {4, 19},
                {5, 19},
                {5, 20},
                {5, 21},
                {5, 22},
                {5, 23},
                {6, 23},
                {7, 23},
                {7, 22},
                {7, 21},
                {7, 20},
                {7, 19},
                {8, 19},
                {9, 19},
                {9, 20},
                {9, 21},
                {9, 22},
                {9, 23},
                {10, 23},
                {11, 23},
                {11, 22},
                {11, 21},
                {12, 21},
                {13, 21},
                {14, 21},
                {15, 21},
                {16, 21},
                {17, 21},
                {18, 21},
                {18, 22},
                {18, 23},
                {19, 23},
                {20, 23},
                {21, 23},
                {22, 23},
                {23, 23},
                {24, 23}
        };

        List<int[]> expected1 = Arrays.asList(expected1Array);
        doTestCase(maze1, expected1);

        char[][] maze2 = {
                {'@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@',},
                {'@',' ',' ',' ','@',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',},
                {'@',' ','@',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ',' ',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@','@','@','@','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@','@','@','@','@','@','@','@','@',' ','@',' ','@',' ','@','@','@',' ','@','@','@',},
                {'@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@','@','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@','@','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@','@','@',' ','@',' ','@',' ','@',' ',' ',' ','@',},
                {'@',' ','@',' ',' ',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ','@',},
                {'@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@',},
        };

        List<int[]> expected2 = new ArrayList<>();
        doTestCase(maze2, expected2);
    }

    private void doTestCase(char[][] maze, List<int[]> expected) {
        System.out.println("\nMaze to solve:\n");
        ArrayTestUtils.printBitmap(maze);

        int rows = maze.length;
        int cols = maze[0].length;

        int[] start = {0, 1};
        int[] exit = {rows - 1, cols - 2};

        char[][] copy = new char[rows][cols];
        ArrayTestUtils.copyBitmap(maze, copy);

        List<int[]> path = SolveMaze.solveMaze(copy, start, exit);
        assert(path.size() == expected.size());
        for (int i = 0; i < path.size(); ++i) {
            assert(path.get(i)[0] == expected.get(i)[0]);
            assert(path.get(i)[1] == expected.get(i)[1]);
        }

        System.out.println("\nSolution:\n");

        if (path.isEmpty()) {
            System.out.println("THERE IS NO SOLUTION");
        } else {
            for (int[] rowCol : path) {
                int row = rowCol[0];
                int col = rowCol[1];
                maze[row][col] = '.';
            }
            ArrayTestUtils.printBitmap(maze);
        }
    }
}
