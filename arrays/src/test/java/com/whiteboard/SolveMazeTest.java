package com.whiteboard;

import java.util.List;
import javafx.util.Pair;
import org.junit.jupiter.api.Test;

class SolveMazeTest {
    @Test
    void solveMaze() {
        System.out.println();
        System.out.println("Test SolveMaze:");
        System.out.println("===============");

        char[][] maze = {
                {'@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@',},
                {'@',' ',' ',' ','@',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',},
                {'@',' ','@',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ',' ',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@','@','@','@','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',},
                {'@',' ','@',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',},
                {'@',' ','@',' ','@','@','@','@','@','@','@','@','@',' ','@',' ','@',' ','@','@','@',' ','@','@','@',},
                {'@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@','@','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@','@','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@','@','@',' ','@',' ','@',' ','@',' ',' ',' ','@',},
                {'@',' ','@',' ',' ',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@','@','@','@','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',' ','@',},
                {'@',' ','@',' ','@',' ','@',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ',' ',' ','@',' ','@',' ','@',},
                {'@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@',' ','@',},
        };

        TestUtils testUtils = new TestUtils();

        System.out.println("\nMaze to solve:\n");
        testUtils.printBitmap(maze);

        int rows = maze.length;
        int cols = maze[0].length;

        Pair<Integer, Integer> start = new Pair<>(0, 1);
        Pair<Integer, Integer> exit = new Pair<>(rows - 1, cols - 2);

        char[][] copy = new char[rows][cols];
        testUtils.copyBitmap(maze, copy);

        List<Pair<Integer, Integer>> path =
                new SolveMaze().solveMaze(copy, start, exit);

        System.out.println("\nSolution:\n");
        for (Pair<Integer, Integer> pair : path) {
            int row = pair.getKey();
            int col = pair.getValue();
            maze[row][col] = '.';
        }
        testUtils.printBitmap(maze);
    }
}
